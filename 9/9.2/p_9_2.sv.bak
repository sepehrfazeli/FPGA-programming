module p_9_2(
        input wire [7:0] op1, op2,
        input wire subtract,
        output reg [7:0] result,
        output reg negative,
        output reg overflow
    );
        always @(posedge clk) begin
            if (subtract) begin
                result <= op1 + (~op2 + 1); // Invert all bits of op2 and add one
                negative <= result[7];
                overflow <= (op1[7] & ~op2[7] & ~result[7]) | (~op1[7] & op2[7] & result[7]);
            end else begin
                result <= op1 + op2;
                negative <= 0;
                overflow <= (~op1[7] & ~op2[7] & result[7]) | (op1[7] & op2[7] & ~result[7]);
            end
        end
    endmodule